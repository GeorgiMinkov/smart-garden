/*
 * This file is generated by jOOQ.
 */
package bg.unisofia.fmi.robotcourse.tables.records;


import bg.unisofia.fmi.robotcourse.tables.History;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HistoryRecord extends UpdatableRecordImpl<HistoryRecord> implements Record7<Integer, String, String, String, String, String, String> {

    private static final long serialVersionUID = -1185631567;

    /**
     * Setter for <code>weather-dispatcher.HISTORY.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>weather-dispatcher.HISTORY.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>weather-dispatcher.HISTORY.REQUEST_TIME</code>.
     */
    public void setRequestTime(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>weather-dispatcher.HISTORY.REQUEST_TIME</code>.
     */
    public String getRequestTime() {
        return (String) get(1);
    }

    /**
     * Setter for <code>weather-dispatcher.HISTORY.MOISTURE</code>.
     */
    public void setMoisture(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>weather-dispatcher.HISTORY.MOISTURE</code>.
     */
    public String getMoisture() {
        return (String) get(2);
    }

    /**
     * Setter for <code>weather-dispatcher.HISTORY.TEMPERATURE</code>.
     */
    public void setTemperature(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>weather-dispatcher.HISTORY.TEMPERATURE</code>.
     */
    public String getTemperature() {
        return (String) get(3);
    }

    /**
     * Setter for <code>weather-dispatcher.HISTORY.HUMIDITY</code>.
     */
    public void setHumidity(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>weather-dispatcher.HISTORY.HUMIDITY</code>.
     */
    public String getHumidity() {
        return (String) get(4);
    }

    /**
     * Setter for <code>weather-dispatcher.HISTORY.WATERING_STATUS</code>.
     */
    public void setWateringStatus(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>weather-dispatcher.HISTORY.WATERING_STATUS</code>.
     */
    public String getWateringStatus() {
        return (String) get(5);
    }

    /**
     * Setter for <code>weather-dispatcher.HISTORY.PAYLOAD</code>.
     */
    public void setPayload(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>weather-dispatcher.HISTORY.PAYLOAD</code>.
     */
    public String getPayload() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, String, String, String, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return History.HISTORY.ID;
    }

    @Override
    public Field<String> field2() {
        return History.HISTORY.REQUEST_TIME;
    }

    @Override
    public Field<String> field3() {
        return History.HISTORY.MOISTURE;
    }

    @Override
    public Field<String> field4() {
        return History.HISTORY.TEMPERATURE;
    }

    @Override
    public Field<String> field5() {
        return History.HISTORY.HUMIDITY;
    }

    @Override
    public Field<String> field6() {
        return History.HISTORY.WATERING_STATUS;
    }

    @Override
    public Field<String> field7() {
        return History.HISTORY.PAYLOAD;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getRequestTime();
    }

    @Override
    public String component3() {
        return getMoisture();
    }

    @Override
    public String component4() {
        return getTemperature();
    }

    @Override
    public String component5() {
        return getHumidity();
    }

    @Override
    public String component6() {
        return getWateringStatus();
    }

    @Override
    public String component7() {
        return getPayload();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getRequestTime();
    }

    @Override
    public String value3() {
        return getMoisture();
    }

    @Override
    public String value4() {
        return getTemperature();
    }

    @Override
    public String value5() {
        return getHumidity();
    }

    @Override
    public String value6() {
        return getWateringStatus();
    }

    @Override
    public String value7() {
        return getPayload();
    }

    @Override
    public HistoryRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public HistoryRecord value2(String value) {
        setRequestTime(value);
        return this;
    }

    @Override
    public HistoryRecord value3(String value) {
        setMoisture(value);
        return this;
    }

    @Override
    public HistoryRecord value4(String value) {
        setTemperature(value);
        return this;
    }

    @Override
    public HistoryRecord value5(String value) {
        setHumidity(value);
        return this;
    }

    @Override
    public HistoryRecord value6(String value) {
        setWateringStatus(value);
        return this;
    }

    @Override
    public HistoryRecord value7(String value) {
        setPayload(value);
        return this;
    }

    @Override
    public HistoryRecord values(Integer value1, String value2, String value3, String value4, String value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HistoryRecord
     */
    public HistoryRecord() {
        super(History.HISTORY);
    }

    /**
     * Create a detached, initialised HistoryRecord
     */
    public HistoryRecord(Integer id, String requestTime, String moisture, String temperature, String humidity, String wateringStatus, String payload) {
        super(History.HISTORY);

        set(0, id);
        set(1, requestTime);
        set(2, moisture);
        set(3, temperature);
        set(4, humidity);
        set(5, wateringStatus);
        set(6, payload);
    }
}
