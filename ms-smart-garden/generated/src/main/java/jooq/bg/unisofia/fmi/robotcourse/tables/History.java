/*
 * This file is generated by jOOQ.
 */
package bg.unisofia.fmi.robotcourse.tables;


import bg.unisofia.fmi.robotcourse.Keys;
import bg.unisofia.fmi.robotcourse.WeatherDispatcher;
import bg.unisofia.fmi.robotcourse.tables.records.HistoryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class History extends TableImpl<HistoryRecord> {

    private static final long serialVersionUID = -1544370241;

    /**
     * The reference instance of <code>weather-dispatcher.HISTORY</code>
     */
    public static final History HISTORY = new History();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HistoryRecord> getRecordType() {
        return HistoryRecord.class;
    }

    /**
     * The column <code>weather-dispatcher.HISTORY.ID</code>.
     */
    public final TableField<HistoryRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>weather-dispatcher.HISTORY.REQUEST_TIME</code>.
     */
    public final TableField<HistoryRecord, String> REQUEST_TIME = createField(DSL.name("REQUEST_TIME"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>weather-dispatcher.HISTORY.PAYLOAD</code>.
     */
    public final TableField<HistoryRecord, String> PAYLOAD = createField(DSL.name("PAYLOAD"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * Create a <code>weather-dispatcher.HISTORY</code> table reference
     */
    public History() {
        this(DSL.name("HISTORY"), null);
    }

    /**
     * Create an aliased <code>weather-dispatcher.HISTORY</code> table reference
     */
    public History(String alias) {
        this(DSL.name(alias), HISTORY);
    }

    /**
     * Create an aliased <code>weather-dispatcher.HISTORY</code> table reference
     */
    public History(Name alias) {
        this(alias, HISTORY);
    }

    private History(Name alias, Table<HistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private History(Name alias, Table<HistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> History(Table<O> child, ForeignKey<O, HistoryRecord> key) {
        super(child, key, HISTORY);
    }

    @Override
    public Schema getSchema() {
        return WeatherDispatcher.WEATHER_DISPATCHER;
    }

    @Override
    public Identity<HistoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_HISTORY;
    }

    @Override
    public UniqueKey<HistoryRecord> getPrimaryKey() {
        return Keys.HISTORY_PK;
    }

    @Override
    public List<UniqueKey<HistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<HistoryRecord>>asList(Keys.HISTORY_PK);
    }

    @Override
    public History as(String alias) {
        return new History(DSL.name(alias), this);
    }

    @Override
    public History as(Name alias) {
        return new History(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public History rename(String name) {
        return new History(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public History rename(Name name) {
        return new History(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
